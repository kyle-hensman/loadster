name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    types: [ opened, synchronize ]
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable, beta]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo index
      uses: actions/cache@v4
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache target directory
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ runner.os }}-target-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}

    - name: Run tests
      run: cargo test --verbose

    - name: Run tests with all features
      run: cargo test --all-features --verbose

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Build release binary
      run: cargo build --release

    - name: Setup test server
      run: |
        # Start a simple HTTP server for testing
        mkdir -p test-server
        echo "Hello World" > test-server/index.html
        python3 -m http.server 8080 --directory test-server &
        sleep 2

    - name: Test basic functionality
      run: |
        ./target/release/loadster http://localhost:8080 -n 10 -c 2
        if [ $? -ne 0 ]; then
          echo "Basic test failed"
          exit 1
        fi

    - name: Test with JSON output
      run: |
        ./target/release/loadster http://localhost:8080 -n 20 -c 5 -o test-report.json
        if [ ! -f test-report.json ]; then
          echo "JSON output file not created"
          exit 1
        fi
        
        # Validate JSON structure
        if ! jq empty test-report.json 2>/dev/null; then
          echo "Invalid JSON output"
          exit 1
        fi
        
        # Check required fields
        jq -e '.url' test-report.json > /dev/null || exit 1
        jq -e '.total_requests' test-report.json > /dev/null || exit 1
        jq -e '.successful' test-report.json > /dev/null || exit 1
        jq -e '.latency.p95_ms' test-report.json > /dev/null || exit 1

    - name: Test help command
      run: |
        ./target/release/loadster --help
        if [ $? -ne 0 ]; then
          echo "Help command failed"
          exit 1
        fi

    - name: Test version command
      run: |
        ./target/release/loadster --version
        if [ $? -ne 0 ]; then
          echo "Version command failed"
          exit 1
        fi

    - name: Test invalid URL handling
      run: |
        ./target/release/loadster invalid-url -n 5 -c 1 || true
        # Should handle gracefully, we just check it doesn't panic

    - name: Upload test report artifact
      uses: actions/upload-artifact@v4
      with:
        name: test-report
        path: test-report.json

  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Check formatting
      run: cargo fmt -- --check

    - name: Run clippy
      run: cargo clippy -- -D warnings

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Build
      run: cargo build --release --verbose

    - name: Upload binary (Unix)
      if: matrix.os != 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: loadster-${{ matrix.os }}
        path: target/release/loadster

    - name: Upload binary (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: loadster-${{ matrix.os }}
        path: target/release/loadster.exe

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-audit
      run: cargo install --locked cargo-audit

    - name: Run cargo audit
      id: cargo_audit_report
      run: cargo audit --json > cargo-audit-report.json || true # Continue on audit failures
      shell: bash

    - name: Generate formatted audit report
      id: format_audit_report
      run: |
        if [ -s cargo-audit-report.json ]; then
          # Format the JSON report into a human-readable string
          # You can use `jq` or a custom script for more elaborate formatting
          REPORT_CONTENT=$(cat cargo-audit-report.json | jq -r 'to_entries[] | "## \(."key")\n```json\n\(."value" | tojson)\n```"')
          echo "audit_report_output<<EOF" >> $GITHUB_OUTPUT
          echo "# Code Coverage Report" >> $GITHUB_OUTPUT
          echo "$REPORT_CONTENT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        else
          echo "audit_report_output<<EOF" >> $GITHUB_OUTPUT
          echo "# Code Coverage Report" >> $GITHUB_OUTPUT
          echo "No code coverage report found." >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        fi
      shell: bash

    - name: Add comment to PR
      uses: peter-evans/create-or-update-comment@v3
      with:
        issue-number: ${{ github.event.pull_request.number }}
        body: ${{ steps.format_audit_report.outputs.audit_report_output }}
        token: ${{ secrets.GITHUB_TOKEN }}

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install tarpaulin
      run: cargo install cargo-tarpaulin

    - name: Generate coverage
      run: cargo tarpaulin --out json --output-dir coverage

    # - name: Upload coverage to Codecov
    #   uses: codecov/codecov-action@v4
    #   with:
    #     files: ./coverage/cobertura.xml
    #     fail_ci_if_error: false

    - name: Upload test report artifact
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: ./coverage/tarpaulin-report.json

    - name: Generate formatted coverage report
      id: format_coverage_report
      run: |
        if [ -s code-coverage-report.json ]; then
          # Format the JSON report into a human-readable string
          # You can use `jq` or a custom script for more elaborate formatting
          REPORT_CONTENT=$(cat code-coverage-report.json | jq -r 'to_entries[] | "## \(."key")\n```json\n\(."value" | tojson)\n```"')
          echo "coverage_report_output<<EOF" >> $GITHUB_OUTPUT
          echo "# Cargo Audit Report" >> $GITHUB_OUTPUT
          echo "$REPORT_CONTENT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        else
          echo "coverage_report_output<<EOF" >> $GITHUB_OUTPUT
          echo "# Cargo Audit Report" >> $GITHUB_OUTPUT
          echo "No vulnerabilities found or cargo audit failed to produce a report." >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        fi
      shell: bash

    - name: Add comment to PR
      uses: peter-evans/create-or-update-comment@v3
      with:
        issue-number: ${{ github.event.pull_request.number }}
        body: ${{ steps.format_coverage_report.outputs.coverage_report_output }}
        token: ${{ secrets.GITHUB_TOKEN }}